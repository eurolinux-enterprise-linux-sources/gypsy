/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_gypsy_client_MARSHAL_H__
#define __dbus_glib_marshal_gypsy_client_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:POINTER,POINTER,POINTER,POINTER,POINTER */
extern void dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                             GValue       *return_value,
                                                                                             guint         n_param_values,
                                                                                             const GValue *param_values,
                                                                                             gpointer      invocation_hint,
                                                                                             gpointer      marshal_data);
void
dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                 GValue       *return_value G_GNUC_UNUSED,
                                                                                 guint         n_param_values,
                                                                                 const GValue *param_values,
                                                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER) (gpointer     data1,
                                                                                     gpointer     arg_1,
                                                                                     gpointer     arg_2,
                                                                                     gpointer     arg_3,
                                                                                     gpointer     arg_4,
                                                                                     gpointer     arg_5,
                                                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER,POINTER,POINTER,POINTER,POINTER */
extern void dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                                     GValue       *return_value,
                                                                                                     guint         n_param_values,
                                                                                                     const GValue *param_values,
                                                                                                     gpointer      invocation_hint,
                                                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                         GValue       *return_value G_GNUC_UNUSED,
                                                                                         guint         n_param_values,
                                                                                         const GValue *param_values,
                                                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER) (gpointer     data1,
                                                                                             gpointer     arg_1,
                                                                                             gpointer     arg_2,
                                                                                             gpointer     arg_3,
                                                                                             gpointer     arg_4,
                                                                                             gpointer     arg_5,
                                                                                             gpointer     arg_6,
                                                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER */
extern void dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER (GClosure     *closure,
                                                             GValue       *return_value,
                                                             guint         n_param_values,
                                                             const GValue *param_values,
                                                             gpointer      invocation_hint,
                                                             gpointer      marshal_data);
void
dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER (GClosure     *closure,
                                                 GValue       *return_value G_GNUC_UNUSED,
                                                 guint         n_param_values,
                                                 const GValue *param_values,
                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 2);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                     GValue       *return_value,
                                                                     guint         n_param_values,
                                                                     const GValue *param_values,
                                                                     gpointer      invocation_hint,
                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                         GValue       *return_value G_GNUC_UNUSED,
                                                         guint         n_param_values,
                                                         const GValue *param_values,
                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_gypsy_client_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_gypsy_client_methods[] = {
  { (GCallback) gypsy_client_get_accuracy, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER, 0 },
  { (GCallback) gypsy_client_get_course, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER, 100 },
  { (GCallback) gypsy_client_start, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER, 221 },
  { (GCallback) gypsy_client_stop, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER, 259 },
  { (GCallback) gypsy_client_get_fix_status, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER, 296 },
  { (GCallback) gypsy_client_get_connection_status, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER, 357 },
  { (GCallback) gypsy_client_get_position, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER, 427 },
  { (GCallback) gypsy_client_get_satellites, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER, 558 },
  { (GCallback) gypsy_client_get_time, dbus_glib_marshal_gypsy_client_BOOLEAN__POINTER_POINTER, 633 },
};

const DBusGObjectInfo dbus_glib_gypsy_client_object_info = {
  0,
  dbus_glib_gypsy_client_methods,
  9,
"org.freedesktop.Gypsy.Accuracy\0GetAccuracy\0S\0fields\0O\0F\0N\0i\0pdop\0O\0F\0N\0d\0hdop\0O\0F\0N\0d\0vdop\0O\0F\0N\0d\0\0org.freedesktop.Gypsy.Course\0GetCourse\0S\0fields\0O\0F\0N\0i\0timestamp\0O\0F\0N\0i\0speed\0O\0F\0N\0d\0direction\0O\0F\0N\0d\0climb\0O\0F\0N\0d\0\0org.freedesktop.Gypsy.Device\0Start\0S\0\0org.freedesktop.Gypsy.Device\0Stop\0S\0\0org.freedesktop.Gypsy.Device\0GetFixStatus\0S\0fixtype\0O\0F\0N\0i\0\0org.freedesktop.Gypsy.Device\0GetConnectionStatus\0S\0connected\0O\0F\0N\0b\0\0org.freedesktop.Gypsy.Position\0GetPosition\0S\0fields\0O\0F\0N\0i\0timestamp\0O\0F\0N\0i\0latitude\0O\0F\0N\0d\0longitude\0O\0F\0N\0d\0altitude\0O\0F\0N\0d\0\0org.freedesktop.Gypsy.Satellite\0GetSatellites\0S\0satellites\0O\0F\0N\0a(ubuuu)\0\0org.freedesktop.Gypsy.Time\0GetTime\0S\0timestamp\0O\0F\0N\0i\0\0\0",
"org.freedesktop.Gypsy.Accuracy\0AccuracyChanged\0org.freedesktop.Gypsy.Course\0CourseChanged\0org.freedesktop.Gypsy.Device\0FixStatusChanged\0org.freedesktop.Gypsy.Device\0ConnectionStatusChanged\0org.freedesktop.Gypsy.Position\0PositionChanged\0org.freedesktop.Gypsy.Satellite\0SatellitesChanged\0org.freedesktop.Gypsy.Time\0TimeChanged\0\0",
"\0"
};

