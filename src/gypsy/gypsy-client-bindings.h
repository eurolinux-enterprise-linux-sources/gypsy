/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Accuracy
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Accuracy

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Accuracy_get_accuracy (DBusGProxy *proxy, gint* OUT_fields, gdouble* OUT_pdop, gdouble* OUT_hdop, gdouble* OUT_vdop, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAccuracy", error, G_TYPE_INVALID, G_TYPE_INT, OUT_fields, G_TYPE_DOUBLE, OUT_pdop, G_TYPE_DOUBLE, OUT_hdop, G_TYPE_DOUBLE, OUT_vdop, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Accuracy_get_accuracy_reply) (DBusGProxy *proxy, gint OUT_fields, gdouble OUT_pdop, gdouble OUT_hdop, gdouble OUT_vdop, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Accuracy_get_accuracy_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_fields;
  gdouble OUT_pdop;
  gdouble OUT_hdop;
  gdouble OUT_vdop;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_fields, G_TYPE_DOUBLE, &OUT_pdop, G_TYPE_DOUBLE, &OUT_hdop, G_TYPE_DOUBLE, &OUT_vdop, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Accuracy_get_accuracy_reply)data->cb) (proxy, OUT_fields, OUT_pdop, OUT_hdop, OUT_vdop, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Accuracy_get_accuracy_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Accuracy_get_accuracy_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAccuracy", org_freedesktop_Gypsy_Accuracy_get_accuracy_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Accuracy */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Course
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Course

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Course_get_course (DBusGProxy *proxy, gint* OUT_fields, gint* OUT_timestamp, gdouble* OUT_speed, gdouble* OUT_direction, gdouble* OUT_climb, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCourse", error, G_TYPE_INVALID, G_TYPE_INT, OUT_fields, G_TYPE_INT, OUT_timestamp, G_TYPE_DOUBLE, OUT_speed, G_TYPE_DOUBLE, OUT_direction, G_TYPE_DOUBLE, OUT_climb, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Course_get_course_reply) (DBusGProxy *proxy, gint OUT_fields, gint OUT_timestamp, gdouble OUT_speed, gdouble OUT_direction, gdouble OUT_climb, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Course_get_course_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_fields;
  gint OUT_timestamp;
  gdouble OUT_speed;
  gdouble OUT_direction;
  gdouble OUT_climb;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_fields, G_TYPE_INT, &OUT_timestamp, G_TYPE_DOUBLE, &OUT_speed, G_TYPE_DOUBLE, &OUT_direction, G_TYPE_DOUBLE, &OUT_climb, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Course_get_course_reply)data->cb) (proxy, OUT_fields, OUT_timestamp, OUT_speed, OUT_direction, OUT_climb, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Course_get_course_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Course_get_course_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCourse", org_freedesktop_Gypsy_Course_get_course_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Course */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Device
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Device

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Device_start (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Start", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Device_start_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Device_start_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Device_start_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Device_start_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Device_start_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Start", org_freedesktop_Gypsy_Device_start_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Device_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Device_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Device_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Device_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Device_stop_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Device_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Stop", org_freedesktop_Gypsy_Device_stop_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Device_get_fix_status (DBusGProxy *proxy, gint* OUT_fixtype, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetFixStatus", error, G_TYPE_INVALID, G_TYPE_INT, OUT_fixtype, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Device_get_fix_status_reply) (DBusGProxy *proxy, gint OUT_fixtype, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Device_get_fix_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_fixtype;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_fixtype, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Device_get_fix_status_reply)data->cb) (proxy, OUT_fixtype, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Device_get_fix_status_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Device_get_fix_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetFixStatus", org_freedesktop_Gypsy_Device_get_fix_status_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Device_get_connection_status (DBusGProxy *proxy, gboolean* OUT_connected, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetConnectionStatus", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_connected, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Device_get_connection_status_reply) (DBusGProxy *proxy, gboolean OUT_connected, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Device_get_connection_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_connected;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_connected, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Device_get_connection_status_reply)data->cb) (proxy, OUT_connected, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Device_get_connection_status_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Device_get_connection_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetConnectionStatus", org_freedesktop_Gypsy_Device_get_connection_status_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Device */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Position
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Position

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Position_get_position (DBusGProxy *proxy, gint* OUT_fields, gint* OUT_timestamp, gdouble* OUT_latitude, gdouble* OUT_longitude, gdouble* OUT_altitude, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetPosition", error, G_TYPE_INVALID, G_TYPE_INT, OUT_fields, G_TYPE_INT, OUT_timestamp, G_TYPE_DOUBLE, OUT_latitude, G_TYPE_DOUBLE, OUT_longitude, G_TYPE_DOUBLE, OUT_altitude, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Position_get_position_reply) (DBusGProxy *proxy, gint OUT_fields, gint OUT_timestamp, gdouble OUT_latitude, gdouble OUT_longitude, gdouble OUT_altitude, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Position_get_position_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_fields;
  gint OUT_timestamp;
  gdouble OUT_latitude;
  gdouble OUT_longitude;
  gdouble OUT_altitude;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_fields, G_TYPE_INT, &OUT_timestamp, G_TYPE_DOUBLE, &OUT_latitude, G_TYPE_DOUBLE, &OUT_longitude, G_TYPE_DOUBLE, &OUT_altitude, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Position_get_position_reply)data->cb) (proxy, OUT_fields, OUT_timestamp, OUT_latitude, OUT_longitude, OUT_altitude, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Position_get_position_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Position_get_position_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetPosition", org_freedesktop_Gypsy_Position_get_position_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Position */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Satellite
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Satellite

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Satellite_get_satellites (DBusGProxy *proxy, GPtrArray** OUT_satellites, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSatellites", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, G_TYPE_BOOLEAN, G_TYPE_UINT, G_TYPE_UINT, G_TYPE_UINT, G_TYPE_INVALID)), OUT_satellites, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Satellite_get_satellites_reply) (DBusGProxy *proxy, GPtrArray *OUT_satellites, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Satellite_get_satellites_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_satellites;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_UINT, G_TYPE_BOOLEAN, G_TYPE_UINT, G_TYPE_UINT, G_TYPE_UINT, G_TYPE_INVALID)), &OUT_satellites, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Satellite_get_satellites_reply)data->cb) (proxy, OUT_satellites, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Satellite_get_satellites_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Satellite_get_satellites_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSatellites", org_freedesktop_Gypsy_Satellite_get_satellites_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Satellite */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Time
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Time

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Gypsy_Time_get_time (DBusGProxy *proxy, gint* OUT_timestamp, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetTime", error, G_TYPE_INVALID, G_TYPE_INT, OUT_timestamp, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_Gypsy_Time_get_time_reply) (DBusGProxy *proxy, gint OUT_timestamp, GError *error, gpointer userdata);

static void
org_freedesktop_Gypsy_Time_get_time_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_timestamp;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_timestamp, G_TYPE_INVALID);
  (*(org_freedesktop_Gypsy_Time_get_time_reply)data->cb) (proxy, OUT_timestamp, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Gypsy_Time_get_time_async (DBusGProxy *proxy, org_freedesktop_Gypsy_Time_get_time_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetTime", org_freedesktop_Gypsy_Time_get_time_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Gypsy_Time */

G_END_DECLS
